ðŸ§  Approach

We use Floydâ€™s Cycle Detection Algorithm (Tortoise and Hare):

Maintain two pointers:

Slow â†’ moves one step at a time.

Fast â†’ moves two steps at a time.

If thereâ€™s a cycle, both pointers will eventually meet inside the loop.

If fast reaches NULL, then no cycle exists.

âœ… Code Implementation (C++)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
    bool hasCycle(ListNode* head) {
        if (!head || !head->next) return false;  // Edge case

        ListNode* slow = head;
        ListNode* fast = head;

        while (fast && fast->next) {
            slow = slow->next;           // Move 1 step
            fast = fast->next->next;     // Move 2 steps

            if (slow == fast) return true; // Cycle found
        }

        return false; // No cycle
    }
};

ðŸ“Š Complexity Analysis

Time Complexity: O(n)
Each pointer at most traverses the list once.

Space Complexity: O(1)
Only two pointers are used.
