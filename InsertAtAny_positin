






// ✅ Function to insert at any position




void insertAtPosition(Node*& head, int pos, int value) {
    if (pos <= 0) {
        cout << "Invalid Position!" << endl;
        return;
    }

    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    // Insert at head

//Agar list empty thi → naya node ban ke head ho jaata hai.
//Agar list non-empty thi → naya node purane head ke aage insert ho jaata hai.
    if (pos == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    int count = 1;

    // Traverse to (pos-1)th node
    while (temp != NULL && count < pos - 1) {
        temp = temp->next;
        count++;
    }

    if (temp == NULL) {
        cout << "Invalid Position!" << endl;
        delete newNode;
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}



//Main code to implement fuction




#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

// Function to add node at end
void addNode(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to pop node from front
void pop_front(Node*& head) {
    if (head == NULL) {
        cout << "List is empty. Nothing to pop front." << endl;
        return;
    }
    Node* temp = head;
    head = head->next;
    temp->next = NULL;
    delete temp;
}

// Function to pop node from back
void pop_back(Node*& head) {
    if (head == NULL) {
        cout << "List is empty. Nothing to pop back." << endl;
        return;
    }

    if (head->next == NULL) { // Only one node
        delete head;
        head = NULL;
        return;
    }

    Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }

    delete temp->next;
    temp->next = NULL;
}

// ✅ Function to insert at any position
void insertAtPosition(Node*& head, int pos, int value) {
    if (pos <= 0) {
        cout << "Invalid Position!" << endl;
        return;
    }

    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    // Insert at head
    if (pos == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    int count = 1;

    // Traverse to (pos-1)th node
    while (temp != NULL && count < pos - 1) {
        temp = temp->next;
        count++;
    }

    if (temp == NULL) {
        cout << "Invalid Position!" << endl;
        delete newNode;
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to display list
void display(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main() {
    Node* head = NULL;

    addNode(head, 10);
    addNode(head, 20);
    addNode(head, 40);

    cout << "Initial list: ";
    display(head);

    insertAtPosition(head, 1, 5);   // insert at head
    cout << "After inserting 5 at pos 1: ";
    display(head);

    insertAtPosition(head, 3, 15);  // insert in middle
    cout << "After inserting 15 at pos 3: ";
    display(head);

    insertAtPosition(head, 6, 50);  // insert at tail
    cout << "After inserting 50 at pos 6: ";
    display(head);

    insertAtPosition(head, 0, 99);  // invalid pos
    insertAtPosition(head, 10, 99); // invalid pos

    return 0;
}
