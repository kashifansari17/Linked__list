📝 Logic for pop_front()

Check if the list is empty (head == NULL)

If yes → nothing to delete → just return.

If list has at least one node:

Store the current head in a temporary pointer (temp = head).

Move the head pointer to the next node (head = head->next).

Disconnect the old head (temp->next = NULL) to avoid dangling reference.

Delete the old head (delete temp) to free memory.


// Function to pop node from front


void pop_front(Node*& head) {
    if (head == NULL) {
        cout << "List is empty. Nothing to pop." << endl;
        return;
    } else {
        Node* temp = head;
        head = head->next;   // move head forward
        temp->next = NULL;   // disconnect old head
        delete temp;         // free memory
    }
}





//full code






#include <iostream>
using namespace std;

// Node structure
class Node {
public:
    int data;
    Node* next;
};

// Function to add a node at the end



void addNode(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    // Case 1: list is empty
    if (head == NULL) {
        head = newNode;
        return;
    }

    // Case 2: list has nodes
    Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}





// Function to pop node from front



void pop_front(Node*& head) {
    if (head == NULL) {
        cout << "List is empty. Nothing to pop." << endl;
        return;
    } else {
        Node* temp = head;
        head = head->next;   // move head forward
        temp->next = NULL;   // disconnect old head
        delete temp;         // free memory
    }
}





// Function to display the linked list




void display(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}






// Driver code
int main() {
    Node* head = NULL;

    addNode(head, 10);
    addNode(head, 20);
    addNode(head, 30);

    cout << "Initial List: ";
    display(head);

    pop_front(head);
    cout << "After one pop: ";
    display(head);

    pop_front(head);
    cout << "After second pop: ";
    display(head);

    pop_front(head);
    cout << "After third pop: ";
    display(head);

    // Popping empty list
    pop_front(head);

    return 0;
}
